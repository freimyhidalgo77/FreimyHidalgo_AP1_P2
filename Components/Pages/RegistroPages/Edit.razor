@page "/Combo/Edit/{ComboId:int}"
@using FreimyHidalgo_AP1_P2.Components.Pages.RegistroPages
@rendermode InteractiveServer
@inject ComboService comboService
@inject ComboDetalleService comboDetalleService
@inject NavigationManager navigation
@inject Context dbContext
@inject ToastService toastService

<PageTitle>Combo</PageTitle>
<EditForm Model="Combo" OnValidSubmit="Modificar">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header text-center">
                <h1><strong>Crear Combo</strong></h1>
            </div>
            <div class="card-body">

                <label class="form-label" for="ClienteId"><strong>Combo ID:</strong></label>
                <InputNumber id="ComboId" class="form-control" @bind-Value="Combo.ComboId" readonly></InputNumber>

                <label class="form-label" for="Fecha"><strong>Fecha:</strong></label>
                <InputDate id="Fecha" class="form-control" @bind-Value="Combo.Fecha"></InputDate>
                <ValidationMessage For="@(() => Combo.Fecha)" />


                <label class="form-label" for="Descripcion"><strong>Descripcion</strong></label>
                <InputText id="Descripcion" class="form-control" @bind-Value="Combo.descripcion"></InputText>
                <ValidationMessage For="@(() => Combo.descripcion)" />

                <label class="form-label" for="Precio"><strong>Monto</strong></label>
                <InputNumber id="Precio" class="form-control" @bind-Value="Combo.precio" readonly></InputNumber>
                <ValidationMessage For="@(() => Combo.precio)" />

                <label class="form-label" for="Vendido"><strong>¿Vendido?</strong></label>
                <InputCheckbox id="Vendido" class="form-check-input" @bind-Value="Combo.Vendido" />
                <ValidationMessage For="@(() => Combo.Vendido)" />


            </div>
        </div>
    </div>




    <div class="container">
        <div class="card shadow-lg">
            <div class="card header text-center">
                <h5><strong>Detalles del articulo seleccionado</strong></h5>
            </div>

            <div class="border border-success p-3 mt-3">
                <h3>Cliente Detalles</h3>


                <SeleccionarArticuloPicker ListaArticulo="articuloList"
                Cantidad="ComboDetalle.Cantidad"
                Precio="ComboDetalle.costo"
                ArticuloId="ComboDetalle.ArticuloId"
                ArticuloSeleccionado="AgregarProducto" />


                <hr />
                <table class="table table-light">
                    <thead class="table table-stripped">
                        <tr class="text-center">
                            <th>Articulo ID</th>
                            <th>Cantidad</th>
                            <th>Precio</th>
                            <th>Remover</th>
                        </tr>
                    </thead>

                    <tbody>
                        @foreach (var detalle in Combo.ComboDetalle)
                        {
                            <tr class="text-center">
                                <td class="ps-3">@detalle.ComboId</td>
                                <td class="ps-3">@detalle.Cantidad</td>
                                <td class="ps-3">@detalle.costo</td>
                                <td class="ps-3">
                                    <button type="button" class="btn btn-outline-danger bi bi-trash"
                                    @onclick="()=>RemoverDetalle(detalle)">
                                    </button>

                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <div class="card-footer">
                <button type="button" class="btn btn-info text-white bi bi-90deg-left">Volver</button>
                <button type="submit" class="btn btn-success text-white bi bi-floppy-fill" @onclick=Modificar>Modificar</button>

            </div>
        </div>
    </div>



</EditForm>


@code {

    [Parameter]
    public int ComboId { get; set; }
    public Combo Combo { get; set; } = new Combo();
    public List<Combo> comboList { get; set; } = new List<Combo>();
    public ComboDetalle ComboDetalle { get; set; } = new ComboDetalle();
    public List<ComboDetalle> comboDetalleList { get; set; } = new List<ComboDetalle>();
    public List<Articulos> articuloList { get; set; } = new List<Articulos>();
    public Articulos Articulos { get; set; } = new Articulos();
    public decimal Total { get; set; }
    public string mensaje { get; set; } = string.Empty;



    protected override async Task OnInitializedAsync()
    {
        Combo = await comboService.BuscarConDetalles(ComboId);
        articuloList = await comboDetalleService.Listar(p => p.ArticuloId > 0);


    }

    public void MontoCalculado()
    {
        Combo.precio = Combo.ComboDetalle.Sum(d => d.costo);
    }


    private async Task AgregarProducto((Articulos articulo, int Cantidad) selection)
    {
        var ProductoExistente = Combo.ComboDetalle.FirstOrDefault(A => A.ArticuloId == selection.articulo.ArticuloId);

        if (ProductoExistente != null)
        {
            ProductoExistente.Cantidad += selection.Cantidad;
            ProductoExistente.costo = ProductoExistente.Articulos.Precio * ProductoExistente.Cantidad;
        }
        else
        {
            var ComboDetalle = new ComboDetalle
                {
                    ArticuloId = selection.articulo.ArticuloId,
                    Cantidad = selection.Cantidad,
                    costo = selection.articulo.Precio * selection.Cantidad,
                };
            Combo.ComboDetalle.Add(ComboDetalle);
        }

        MontoCalculado();
        await Task.CompletedTask;


    }


    private async Task Modificar()
    {

        if (!Combo.ComboDetalle.Any())
        {
            mensaje = "Debe agregar al menos un articulo";
            return;
        }
       
        toastService.Notify(new(ToastType.Primary, "Combo modificado", "Se ha modificado el combo correctamente!"));
        var crear = await comboService.Guardar(Combo);
        Combo = new Combo();

        if (crear)
        {
           
            navigation.NavigateTo("/Combo/Index");
        }
        else
        {
            mensaje = "No se ha creado correctamente el combo";
        }


    }


    public void RemoverDetalle(ComboDetalle detalle)
    {
        Combo.ComboDetalle.Remove(detalle);
        Combo.ComboId = detalle.ComboId;
        ComboDetalle.Cantidad = detalle.Cantidad;
        ComboDetalle.costo = detalle.costo;
    }

    public void Volver()
    {
        navigation.NavigateTo("/Combo/Index");
    }
}
